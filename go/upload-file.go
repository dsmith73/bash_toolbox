 package main

 import (
         "bytes"
         "fmt"
         "io"
         "io/ioutil"
         "mime/multipart"
         "net/http"
         "os"
         "time"
 )

 func main() {
         if len(os.Args) != 3 {
                 fmt.Printf("Usage : %s <URL to upload file> <filename> \n", os.Args[0])
                 os.Exit(0)
         }

         uploadURL := os.Args[1]
         fileToUpload := os.Args[2]

         //sanity check
         fmt.Println(uploadURL)
         fmt.Println(fileToUpload)

         file, err := os.Open(fileToUpload)
         if err != nil {
                 fmt.Println("File open error : ", err)
                 os.Exit(-1)
         }

         defer file.Close()

         // since we are not going to upload our file with a Web browser or curl -F
         // we need to prepare a "virtual form" -- similar to what you can visually see
         // on localhost:8888 generated by receiveSubmission.go

         fileInfo, _ := file.Stat()

         var fileBody bytes.Buffer
         writer := multipart.NewWriter(&fileBody)

         // https://golang.org/pkg/mime/multipart/#Writer.CreateFormFile
         // must match what is expected by the receiving program
         // so, set field to "fileUploadName" for easier life...

         filePart, err := writer.CreateFormFile("fileUploadName", fileInfo.Name())
         if err != nil {
                 fmt.Println("CreateFormFile error : ", err)
                 os.Exit(-1)
         }

         // remember we are using mime - multipart
         _, err = io.Copy(filePart, file)

         if err != nil {
                 fmt.Println("io.Copy error : ", err)
                 os.Exit(-1)
         }

         // populate our header with simple data
         _ = writer.WriteField("title", "Sample data collected on 13th Oct 2016")

         // remember to close writer
         err = writer.Close()
         if err != nil {
                 fmt.Println("Writer close error : ", err)
                 os.Exit(-1)
         }

         // ok, our "virtual form" is ready, time to submit our fileBody to
         // http://localhost:8888/submit with POST

         request, err := http.NewRequest("POST", uploadURL, &fileBody)
         if err != nil {
                 fmt.Println("POST ERROR : ", err)
                 os.Exit(-1)
         }

         // set the header with the proper content type for the fileBody's boundary
         // see https://golang.org/pkg/mime/multipart/#Writer.FormDataContentType

         request.Header.Set("Content-Type", writer.FormDataContentType())

         // upload/post/submit the file
         // with 10 seconds timeout
         client := &http.Client{Timeout: time.Second * 10}

         response, err := client.Do(request)
         if err != nil {
                 fmt.Println("Client POST error : ", err)
                 os.Exit(-1)
         }

         defer response.Body.Close()

         // Read response body
         body, err := ioutil.ReadAll(response.Body)
         if err != nil {
                 fmt.Println("Error reading body of response.", err)
                 os.Exit(-1)
         }

         fmt.Println("Output : ", string(body))

 }
 
